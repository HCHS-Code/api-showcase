---
// Define inappropriate tags to filter out
const inappropriateTags = [
  'alcoholic',
  'beer',
  'furry pussy',
  'fucker',
  'gun',
  'hangover',
  'hitler',
  'kinky pussy',
  'lazy fuck',
  'lustful',
  'nsfw',
  'nazi',
  'pussy',
  'radical',
  'retard',
  'smoking',
  'staline',
  'thug',
  'trap',
  'trump',
  'drugs',
  'drunk',
  'fatass',
  'shit',
  'suicide',
  'violent',
  'wtf'
].map(tag => tag.toLowerCase());

// Get all available tags at build time
const tagsResponse = await fetch('https://cataas.com/api/tags');
const rawTags: string[] = await tagsResponse.json();

// Filter out inappropriate tags
const allTags = rawTags.filter(tag => 
  !inappropriateTags.includes(tag.toLowerCase())
);

interface CatImage {
  id: string;
  tags: string[];
}

// Initial data will be empty, we'll load it client-side
const initialCats: CatImage[] = [];
---

<div class="max-w-6xl mx-auto p-6" id="cat-gallery">
  <form class="mb-8" id="search-form">
    <div class="mb-4">
      <label for="tag-select" class="block text-sm font-medium text-gray-700 mb-2">Search by tag</label>
      <select
        id="tag-select"
        class="w-full max-w-md px-4 py-2 rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
      >
        <option value="">All cats</option>
        {allTags.map((tag) => (
          <option value={tag}>{tag}</option>
        ))}
      </select>
    </div>
  </form>

  <div id="loading" class="text-center text-gray-600 hidden">Loading...</div>
  <div id="error" class="text-center text-red-500 hidden"></div>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="cats-grid"></div>

  <div class="mt-8 flex justify-center gap-4" id="pagination">
    <button
      id="prev-page"
      class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Previous
    </button>
    <span id="page-info" class="py-2 px-4">Page 1</span>
    <button
      id="next-page"
      class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Next
    </button>
  </div>
</div>

<script>
  interface CatImage {
    id: string;
    tags: string[];
  }

  let currentPage = 1;
  const itemsPerPage = 6;
  let currentTag = '';
  let loading = false;

  const loadingEl = document.getElementById('loading');
  const errorEl = document.getElementById('error');
  const catsGridEl = document.getElementById('cats-grid');
  const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
  const nextButton = document.getElementById('next-page') as HTMLButtonElement;
  const pageInfo = document.getElementById('page-info');
  const tagSelect = document.getElementById('tag-select') as HTMLSelectElement;

  async function fetchCats() {
    if (!loadingEl || !errorEl || !catsGridEl) return;

    loading = true;
    loadingEl.classList.remove('hidden');
    errorEl.classList.add('hidden');
    catsGridEl.innerHTML = '';

    try {
      let url = `https://cataas.com/api/cats?skip=${(currentPage - 1) * itemsPerPage}&limit=${itemsPerPage}`;
      if (currentTag) {
        url += `&tags=${currentTag}`;
      }

      const response = await fetch(url);
      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
      
      const cats = await response.json();
      
      // Get total count for pagination
      const countUrl = currentTag ? 
        `https://cataas.com/api/cats?tags=${currentTag}&skip=0&limit=0` :
        'https://cataas.com/api/count';
      const countResponse = await fetch(countUrl);
      const countData = await countResponse.json();
      const totalCats = currentTag ? countData.length : countData.count;
      
      updatePagination(totalCats);
      renderCats(cats);
    } catch (e) {
      errorEl.textContent = e instanceof Error ? e.message : 'An error occurred';
      errorEl.classList.remove('hidden');
    } finally {
      loadingEl.classList.add('hidden');
      loading = false;
    }
  }

  // Define inappropriate tags (same as server-side)
  const inappropriateTags = [
    'beer',
    'nsfw',
    'nazi',
    'drugs',
    'drunk',
    'fatass',
    'shit',
    'suicide',
    'wtf'
  ].map(tag => tag.toLowerCase());

  function renderCats(cats: CatImage[]) {
    if (!catsGridEl) return;

    // Filter out cats that have any inappropriate tags
    const filteredCats = cats.filter(cat => 
      !cat.tags.some(tag => inappropriateTags.includes(tag.toLowerCase()))
    );

    catsGridEl.innerHTML = filteredCats.map((cat: CatImage) => `
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <img
          src="https://cataas.com/cat/${cat.id}"
          alt="Cat with tags: ${cat.tags.join(', ')}"
          class="w-full h-48 object-cover"
          loading="lazy"
        />
        <div class="p-4">
          <div class="flex flex-wrap gap-2">
            ${cat.tags
              .filter(tag => !inappropriateTags.includes(tag.toLowerCase()))
              .map((tag: string) => `
                <span class="px-2 py-1 bg-gray-100 text-sm text-gray-600 rounded-full cursor-pointer hover:bg-gray-200"
                  onclick="selectTag('${tag}')"
                >
                  #${tag}
                </span>
              `).join('')}
          </div>
        </div>
      </div>
    `).join('');
  }

  function updatePagination(totalCats: number) {
    if (!prevButton || !nextButton || !pageInfo) return;

    const totalPages = Math.ceil(totalCats / itemsPerPage);
    prevButton.disabled = currentPage <= 1;
    nextButton.disabled = currentPage >= totalPages;
    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
  }

  function selectTag(tag: string) {
    if (!tagSelect) return;
    tagSelect.value = tag;
    currentTag = tag;
    currentPage = 1;
    fetchCats();
  }

  // Event Listeners
  tagSelect?.addEventListener('change', (e) => {
    const select = e.target as HTMLSelectElement;
    currentTag = select.value;
    currentPage = 1;
    fetchCats();
  });

  prevButton?.addEventListener('click', () => {
    if (currentPage > 1 && !loading) {
      currentPage--;
      fetchCats();
    }
  });

  nextButton?.addEventListener('click', () => {
    if (!loading) {
      currentPage++;
      fetchCats();
    }
  });

  // Initial load
  fetchCats();
</script>
